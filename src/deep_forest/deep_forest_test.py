# -*- coding: utf-8 -*-
"""testes_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e6-h-n83Gn0YHXvgQD9cT0XvuOKVq0f6

## Explorando o dataset

Link para o dataset utilizado: https://www.kaggle.com/datasets/quadeer15sh/augmented-forest-segmentation/code
"""

from PIL import Image
import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

dataset_dir = '/content/drive/Shareddrives/grupo2-AR3S/Datasets/drone_images'

"""### Abordagem 01

Utilizando PIL para carregar as imagens em formato padrão. Útil para fazer operações específicar sobre as imagens, individualmente.
"""

from PIL import Image

image_files = [f for f in os.listdir(dataset_dir) if f.endswith('.jpg') or f.endswith('.png')]

images = []
for image_file in image_files:
    image_path = os.path.join(dataset_dir, image_file)
    image = Image.open(image_path)
    images.append(image)

print(f"Total de imagens carregadas: {len(images)}")

plt.imshow(images[3])
plt.axis('off')
plt.show()

"""Redimensionamento das imagens do dataset:"""

images_resized = [image.resize((224, 224)) for image in images]

"""Conversão para arrays numpy:"""

# Converte as imagens redimensionadas para arrays NumPy
image_arrays = [np.array(image) for image in images_resized]

# Converte para um único array de dados
image_arrays = np.array(image_arrays)

# Exemplo: Visualizar a forma do array de imagens
print(f"Forma do array de imagens: {image_arrays.shape}")

plt.figure(figsize=(10, 10))
for i in range(5):  # Exibe as primeiras 9 imagens
    plt.subplot(3, 3, i+1)
    plt.imshow(images_resized[i])
    plt.axis('off')
plt.show()

# Normalizar as imagens para a faixa [0, 1]
image_arrays_normalized = [np.array(image) / 255.0 for image in images_resized]

"""Exemplo: aplicação de máscara"""

image_gray = images_resized[0].convert('L')

plt.imshow(image_gray, cmap='gray')
plt.axis('off')  # Remove os eixos para uma visualização mais limpa
plt.show()

!pip install DeepForest

from deepforest import main

# Carregando o modelo DeepForest
model = main.deepforest()
model.use_release()

def detect_trees(image_array):
  # Convertendo o array NumPy de volta para uma imagem PIL
  image = Image.fromarray((image_array * 255).astype(np.uint8))
  image_cv2 = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

  # Salvando a imagem temporariamente para uso com o modelo DeepForest
  temp_image_path = "temp_image.png"
  image.save(temp_image_path)

  # Realizando a predição com DeepForest
  predictions = model.predict_image(path=temp_image_path)

  # Plotando as predições na imagem
  for index, row in predictions.iterrows():
      cv2.rectangle(image_cv2,
                    (int(row['xmin']), int(row['ymin'])),
                    (int(row['xmax']), int(row['ymax'])),
                    (255,0,0), 2)

  # Exibindo a imagem com as detecções
  plt.figure(figsize=(10, 10))
  plt.imshow(cv2.cvtColor(image_cv2, cv2.COLOR_BGR2RGB))
  plt.title(f"Imagem com Detecções - Total de Árvores: {len(predictions)}")
  plt.axis('off')
  plt.show()

  return len(predictions)

total_trees = 0
for image_array in image_arrays_normalized:
    num_trees = detect_trees(image_array)
    total_trees += num_trees

print(f"Total de árvores detectadas no dataset: {total_trees}")